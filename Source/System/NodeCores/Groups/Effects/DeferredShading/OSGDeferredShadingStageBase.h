/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DeferredShadingStage
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDEFERREDSHADINGSTAGEBASE_H_
#define _OSGDEFERREDSHADINGSTAGEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGEffectGroupsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGSimpleStage.h" // Parent

#include "OSGBaseFields.h"               // PixelFormats type
#include "OSGShaderProgramChunkFields.h" // GBufferProgram type
#include "OSGTextureObjChunkFields.h"    // PhotometricMap type
#include "OSGLightFields.h"              // Lights type
 
#include "OSGDeferredShadingStageFields.h"

OSG_BEGIN_NAMESPACE


class DeferredShadingStage;

//! \brief DeferredShadingStage Base Class.

class OSG_EFFECTGROUPS_DLLMAPPING DeferredShadingStageBase : public SimpleStage
{
  public:

    typedef SimpleStage Inherited;
    typedef SimpleStage ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(DeferredShadingStage);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        PixelFormatsFieldId = Inherited::NextFieldId,
        PixelTypesFieldId = PixelFormatsFieldId + 1,
        GBufferProgramFieldId = PixelTypesFieldId + 1,
        AmbientProgramFieldId = GBufferProgramFieldId + 1,
        LightProgramsFieldId = AmbientProgramFieldId + 1,
        PhotometricMapsFieldId = LightProgramsFieldId + 1,
        LightsFieldId = LightProgramsFieldId + 1,
        NextFieldId = LightsFieldId + 1
    };

    static const OSG::BitVector PixelFormatsFieldMask =
        (TypeTraits<BitVector>::One << PixelFormatsFieldId);
    static const OSG::BitVector PixelTypesFieldMask =
        (TypeTraits<BitVector>::One << PixelTypesFieldId);
    static const OSG::BitVector GBufferProgramFieldMask =
        (TypeTraits<BitVector>::One << GBufferProgramFieldId);
    static const OSG::BitVector AmbientProgramFieldMask =
        (TypeTraits<BitVector>::One << AmbientProgramFieldId);
    static const OSG::BitVector LightProgramsFieldMask =
        (TypeTraits<BitVector>::One << LightProgramsFieldId);
    static const OSG::BitVector PhotometricMapsFieldMask =
        (TypeTraits<BitVector>::One << PhotometricMapsFieldId);
    static const OSG::BitVector LightsFieldMask =
        (TypeTraits<BitVector>::One << LightsFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFGLenum          MFPixelFormatsType;
    typedef MFGLenum          MFPixelTypesType;
    typedef SFUnrecShaderProgramChunkPtr SFGBufferProgramType;
    typedef SFUnrecShaderProgramChunkPtr SFAmbientProgramType;
    typedef MFUnrecShaderProgramChunkPtr MFLightProgramsType;
    typedef MFUnrecTextureObjChunkPtr MFPhotometricMapsType;
    typedef MFUnrecLightPtr   MFLightsType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFGLenum            *editMFPixelFormats   (void);
            const MFGLenum            *getMFPixelFormats    (void) const;

                  MFGLenum            *editMFPixelTypes     (void);
            const MFGLenum            *getMFPixelTypes      (void) const;
            const SFUnrecShaderProgramChunkPtr *getSFGBufferProgram (void) const;
                  SFUnrecShaderProgramChunkPtr *editSFGBufferProgram (void);
            const SFUnrecShaderProgramChunkPtr *getSFAmbientProgram (void) const;
                  SFUnrecShaderProgramChunkPtr *editSFAmbientProgram (void);
            const MFUnrecShaderProgramChunkPtr *getMFLightPrograms  (void) const;
                  MFUnrecShaderProgramChunkPtr *editMFLightPrograms  (void);
            const MFUnrecTextureObjChunkPtr *getMFPhotometricMaps  (void) const;
                  MFUnrecTextureObjChunkPtr *editMFPhotometricMaps  (void);
            const MFUnrecLightPtr     *getMFLights         (void) const;
                  MFUnrecLightPtr     *editMFLights         (void);


            MFGLenum           ::reference       editPixelFormats   (const UInt32 index);
            const GLenum              &getPixelFormats    (const UInt32 index) const;

            MFGLenum           ::reference       editPixelTypes     (const UInt32 index);
            const GLenum              &getPixelTypes      (const UInt32 index) const;

                  ShaderProgramChunk * getGBufferProgram (void) const;

                  ShaderProgramChunk * getAmbientProgram (void) const;

                  ShaderProgramChunk * getLightPrograms  (const UInt32 index) const;

                  TextureObjChunk * getPhotometricMaps  (const UInt32 index) const;

                  Light * getLights         (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setGBufferProgram (ShaderProgramChunk * const value);
            void setAmbientProgram (ShaderProgramChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToLightPrograms           (ShaderProgramChunk * const value   );
    void assignLightPrograms          (const MFUnrecShaderProgramChunkPtr &value);
    void removeFromLightPrograms (UInt32               uiIndex );
    void removeObjFromLightPrograms(ShaderProgramChunk * const value   );
    void clearLightPrograms            (void                         );

    void pushToPhotometricMaps           (TextureObjChunk * const value   );
    void assignPhotometricMaps          (const MFUnrecTextureObjChunkPtr &value);
    void removeFromPhotometricMaps (UInt32               uiIndex );
    void removeObjFromPhotometricMaps(TextureObjChunk * const value   );
    void clearPhotometricMaps            (void                         );

    void pushToLights              (Light * const value   );
    void assignLights             (const MFUnrecLightPtr   &value);
    void removeFromLights (UInt32               uiIndex );
    void removeObjFromLights(Light * const value   );
    void clearLights                (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DeferredShadingStageTransitPtr  create          (void);
    static  DeferredShadingStage           *createEmpty     (void);

    static  DeferredShadingStageTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  DeferredShadingStage            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  DeferredShadingStageTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFGLenum          _mfPixelFormats;
    MFGLenum          _mfPixelTypes;
    SFUnrecShaderProgramChunkPtr _sfGBufferProgram;
    SFUnrecShaderProgramChunkPtr _sfAmbientProgram;
    MFUnrecShaderProgramChunkPtr _mfLightPrograms;
    MFUnrecTextureObjChunkPtr _mfPhotometricMaps;
    MFUnrecLightPtr   _mfLights;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DeferredShadingStageBase(void);
    DeferredShadingStageBase(const DeferredShadingStageBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DeferredShadingStageBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const DeferredShadingStage *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandlePixelFormats    (void) const;
     EditFieldHandlePtr editHandlePixelFormats   (void);
     GetFieldHandlePtr  getHandlePixelTypes      (void) const;
     EditFieldHandlePtr editHandlePixelTypes     (void);
     GetFieldHandlePtr  getHandleGBufferProgram  (void) const;
     EditFieldHandlePtr editHandleGBufferProgram (void);
     GetFieldHandlePtr  getHandleAmbientProgram  (void) const;
     EditFieldHandlePtr editHandleAmbientProgram (void);
     GetFieldHandlePtr  getHandleLightPrograms   (void) const;
     EditFieldHandlePtr editHandleLightPrograms  (void);
     GetFieldHandlePtr  getHandlePhotometricMaps   (void) const;
     EditFieldHandlePtr editHandlePhotometricMaps  (void);
     GetFieldHandlePtr  getHandleLights          (void) const;
     EditFieldHandlePtr editHandleLights         (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      DeferredShadingStageBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DeferredShadingStageBase &source);
};

typedef DeferredShadingStageBase *DeferredShadingStageBaseP;

typedef CoredNodeRefPtr  <DeferredShadingStage> DeferredShadingStageNodeRefPtr;
typedef CoredNodeMTRefPtr<DeferredShadingStage> DeferredShadingStageNodeMTRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGDEFERREDSHADINGSTAGEBASE_H_ */
